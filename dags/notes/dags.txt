start_date: start
schedule_interval: triggered after the start_date + schedule_interval

1. cron X 2. timedelta
    1. stateless
    2. statefull

# cron: according to my cron expression
schedule_interval="@daily" -> 0 0 * * *
1st task: 01/01 00:00
2nd task: 02/01 00:00
...

# timedelta: according to the previous execution date
schedule_interval=timedelta(days=1)
start_date=01/01 10::00AM
1st task: 01/01 10:00 AM
2nd task: 02/01 10:00 AM
...

idempotent: same side effect for different executions
deterministc: same output given an input

idempotent:
PostgressOperator(task_id='create_table', sql='CREATE TABLE IF NOT EXISTS my_table')
not idempotent:
PostgressOperator(task_id='create_table', sql='CREATE TABLE my_table')


A key capability of Airflow is that these DAG Runs are atomic, idempotent items, and the scheduler, by default, will examine the lifetime of the DAG (from start to end/now, one interval at a time) and kick off a DAG Run for any interval that has not been run (or has been cleared). This concept is called Catchup.

catchup: prevent to run non-tr iggered tasks (if false); (docs def): The scheduler, by default, will kick off a DAG Run for any interval that has not been run since the last execution date (or has been cleared) (if true);
backfilling: automatically backfill your data for a period time; common for reusing dags; docs: when you may want to run the dag for a specified historical period
see https://airflow.apache.org/docs/apache-airflow/stable/dag-run.html
